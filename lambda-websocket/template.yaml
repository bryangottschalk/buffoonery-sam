AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Websocket API and components

Parameters:
  StageName:
    Type: String
    Description: the development stage
  CertArn:
    Type: String
    Description: Certificate Manager Arn for the ssl cert if one has already been created
    Default: none
  MyDomainName:
    Type: String
    Description: Api Domain
  ApiSubdomain:
    Type: String
    Description: Api Domain
    AllowedValues:
      - api
  HostedZoneId:
    Type: String
    Description: Route53 Hosted zone ID if one has already been created

Conditions:
  CreateCert: !Equals [!Ref CertArn, 'none']

Globals:
  Function:
    Timeout: 5
    Handler: index.handler
    Runtime: nodejs12.x

Resources:
  GeneratedCert: # If a Certificate ARN is not passed in the parameters, then a new cert is created and will required validation during the deploy
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCert
    Properties:
      DomainName: !Ref MyDomainName
      DomainValidationOptions:
        - DomainName: !Ref MyDomainName
          HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames:
        - !Sub '*.${MyDomainName}'
      ValidationMethod: DNS

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Domain:
        DomainName: !Sub '${StageName}-${ApiSubdomain}.${MyDomainName}' # ie: dev-api.buffoonery.io
        CertificateArn: !If [CreateCert, !Ref GeneratedCert, !Ref CertArn]
        EndpointConfiguration: EDGE
        BasePath: /
        Route53:
          HostedZoneId: !Ref HostedZoneId

  GameroomsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'roomcode'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'roomcode'
          KeyType: 'HASH'

  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: 'category'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'category'
          KeyType: 'HASH'
  WebSocketAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'websocket-gamerooms-${StageName}'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketAPI
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg

  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketAPI
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketAPI

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: !Sub '${StageName} Stage'
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketAPI

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GameroomsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameroomsTable
        - SNSCrudPolicy:
            TopicName: ClientConnected

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GameroomsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameroomsTable
        - SNSCrudPolicy:
            TopicName: ClientDisconnected

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref GameroomsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameroomsTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  ClientConnectedGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: client-connected-get
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 256
      Description: A function to get connected clients
      Environment:
        Variables:
          TableName: !Ref GameroomsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameroomsTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
                - 'execute-api:Invoke'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketAPI}/*'
      Events:
        BuffooneryRestApiGet:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /getmeetingstate/{roomcode}
            Method: GET

  ClientConnectedGetPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketAPI
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ClientConnectedGetFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ApiEndpoint:
    Description: 'REST API endpoint URL'
    Value: !Sub 'https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/'

  GameroomsTableArn:
    Description: 'Gamerooms table ARN'
    Value: !GetAtt GameroomsTable.Arn

  GameroomsTableName:
    Description: 'Gamerooms table ARN'
    Value: !Ref GameroomsTable

  OnConnectFunctionArn:
    Description: 'OnConnect function ARN'
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: 'OnDisconnect function ARN'
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: 'SendMessage function ARN'
    Value: !GetAtt SendMessageFunction.Arn

  WSAPIDomain:
    Description: 'The WebSocket api domain'
    Value:
      !Join [
        '',
        [
          !Ref WebSocketAPI,
          '.execute-api.',
          !Ref 'AWS::Region',
          '.amazonaws.com'
        ]
      ]

  WebSocketURI:
    Description: 'The WSS Protocol URI to connect to'
    Value:
      !Join [
        '',
        [
          'wss://',
          !Ref WebSocketAPI,
          '.execute-api.',
          !Ref 'AWS::Region',
          '.amazonaws.com/',
          !Ref 'Stage'
        ]
      ]
